name: "AlexNet-aanet"

input: "data"
input_dim: 1
input_dim: 3
input_dim: 224
input_dim: 224

input: "extra"
input_dim: 1
input_dim: 2
input_dim: 1
input_dim: 1

### embedding
layer {
  name: "embedding_fc1"
  type: "InnerProduct"
  bottom: "extra"
  top: "embedding_fc1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
    bottom: "embedding_fc1"
    top: "embedding_fc1"
    name: "bn_embedding_fc1"
    type: "BatchNorm"
    batch_norm_param {
        moving_average_fraction: 0.999
    }
}

layer {
    bottom: "embedding_fc1"
    top: "embedding_fc1"
    name: "scale_embedding_fc1"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}
layer {
  name: "relu_embedding_fc1"
  type: "ReLU"
  bottom: "embedding_fc1"
  top: "embedding_fc1"
}
layer {
  name: "embedding_fc2"
  type: "InnerProduct"
  bottom: "embedding_fc1"
  top: "embedding_fc2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}


### main network alexnet
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    name: "conv1_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv1_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CAFFE
  }
}
layer {
    bottom: "conv1"
    top: "conv1"
    name: "bn_conv1"
    type: "BatchNorm"
    batch_norm_param {
        moving_average_fraction: 0.999
    }
}

layer {
    bottom: "conv1"
    top: "conv1"
    name: "scale_conv1"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}

#weight learning
layer {
  name: "filter_ip2"
  type: "InnerProduct"
  bottom: "embedding_fc2"
  top: "filter_ip2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 307200
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  bottom: "filter_ip2"
  top: "conv2"
  param {
    name: "conv2_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv2_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CAFFE
    weight_operation: 2
  }
}
layer {
    bottom: "conv2"
    top: "conv2"
    name: "bn_conv2"
    type: "BatchNorm"
    batch_norm_param {
        moving_average_fraction: 0.999
    }
}

layer {
    bottom: "conv2"
    top: "conv2"
    name: "scale_conv2"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}

#weight learning
layer {
  name: "filter_ip3"
  type: "InnerProduct"
  bottom: "embedding_fc2"
  top: "filter_ip3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 884736
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  bottom: "filter_ip3"
  top: "conv3"
  param {
    name: "conv3_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv3_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CAFFE
    weight_operation: 2
  }
}
layer {
    bottom: "conv3"
    top: "conv3"
    name: "bn_conv3"
    type: "BatchNorm"
    batch_norm_param {
        moving_average_fraction: 0.999
    }
}

layer {
    bottom: "conv3"
    top: "conv3"
    name: "scale_conv3"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}

#weight learning
layer {
  name: "filter_ip4"
  type: "InnerProduct"
  bottom: "embedding_fc2"
  top: "filter_ip4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 663552
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  bottom: "filter_ip4"
  top: "conv4"
  param {
    name: "conv4_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv4_b"    
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CAFFE
    weight_operation: 2
  }
}
layer {
    bottom: "conv4"
    top: "conv4"
    name: "bn_conv4"
    type: "BatchNorm"
    batch_norm_param {
        moving_average_fraction: 0.999
    }
}

layer {
    bottom: "conv4"
    top: "conv4"
    name: "scale_conv4"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}

#weight learning
layer {
  name: "filter_ip5"
  type: "InnerProduct"
  bottom: "embedding_fc2"
  top: "filter_ip5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 442368
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  bottom: "filter_ip5"
  top: "conv5"
  param {
    name: "conv5_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "conv5_b"
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CAFFE
    weight_operation: 2
  }
}
layer {
    bottom: "conv5"
    top: "conv5"
    name: "bn_conv5"
    type: "BatchNorm"
    batch_norm_param {
        moving_average_fraction: 0.999
    }
}

layer {
    bottom: "conv5"
    top: "conv5"
    name: "scale_conv5"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}

# weight learning
layer {
  name: "filter_ip6"
  type: "InnerProduct"
  bottom: "embedding_fc2"
  top: "filter_ip6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4718592
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "feat0"
  type: "Convolution"
  bottom: "pool5"
  bottom: "filter_ip6"
  top: "feat0"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    kernel_size: 6
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CAFFE
    weight_operation: 2
  }
}
layer {
    bottom: "feat0"
    top: "feat0"
    name: "bn_feat0"
    type: "BatchNorm"
    batch_norm_param {
        moving_average_fraction: 0.999
    }
}
layer {
    bottom: "feat0"
    top: "feat0"
    name: "scale_feat0"
    type: "Scale"
    scale_param {
        bias_term: true
    }
}

layer {
  name: "relu_feat0"
  type: "ReLU"
  bottom: "feat0"
  top: "feat0"
}
layer {
  name: "filter_ip7"
  type: "InnerProduct"
  bottom: "embedding_fc2"
  top: "filter_ip7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "feat1"
  type: "Convolution"
  bottom: "feat0"
  bottom: "filter_ip7"
  top: "feat1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    engine: CAFFE
    weight_operation: 2
  }
}
